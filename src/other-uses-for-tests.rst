

.. _other-uses-for-tests:

===========
テストのその他の使用法
===========

自動テストに慣れてくると、
ほかの目的のためにもテストを使いたくなってくることでしょう。
ここではそんな例を説明します。

.. _testing-practices.agile-documentation:

アジャイルな文書作成
##########

一般的に、エクストリームプログラミングのようなアジャイルプロセスを採用しているプロジェクトでは、
ドキュメントの内容が実際の設計やコードに追いついていないことが多いものです。
エクストリームプログラミングでは *コードの共同所有
(collective code ownership)* を要求しており、
すべての開発者がシステム全体の動作を知っておく必要があります。
作成するテストに対して、そのクラスが何を行うべきなのかを示すような
「わかりやすい」名前をつけられるようにさえしておけば、PHPUnit の
TestDox 機能を使用して自動的にドキュメントを生成することができます。
このドキュメントにより、開発者たちはプロジェクト内の各クラスが
どのようにふるまうべきなのかを知ることができます。

PHPUnit の TestDox 機能は、テストクラス内のすべてのテストメソッドの名前を抽出し、
それを PHP 風のキャメルケースから通常の文に変換します。つまり
``testBalanceIsInitiallyZero()`` が "Balance is initially zero"
のようになるわけです。最後のほうの数字のみが違うメソッド、例えば
``testBalanceCannotBecomeNegative()`` と
``testBalanceCannotBecomeNegative2()`` のようなものが存在した場合は、
文 "Balance cannot become negative" は一度のみ表示され、
全てのテストが成功したことを表します。

``BankAccount`` クラスのアジャイルな文書を見てみましょう。

.. code-block:: bash

    $ phpunit --testdox BankAccountTest
    PHPUnit 7.0.0 by Sebastian Bergmann and contributors.

    BankAccount
     [x] Balance is initially zero
     [x] Balance cannot become negative

また、アジャイルな文書を HTML あるいはプレーンテキスト形式で作成してファイルに書き出すこともできます。
この場合は、引数 ``--testdox-html``
あるいは ``--testdox-text`` を使用します。

アジャイルな文書は、プロジェクト内であなたが作成しようとしている外部パッケージについて、
このように動作するであるという期待をまとめた文書にもなります。
外部のパッケージを使用するときには、
そのパッケージが期待通りに動作しなくなるというリスクに常にさらされています。
パッケージのバージョンアップにより知らないうちに挙動が変わってしまい、
あなたのコードが動作しなくなる可能性もあります。そのようなことを避けるため、
「このパッケージはこのように動作するはず」
ということを常にテストケースで記述しておくようにします。テストが成功すれば、
期待通りに動作していることがわかります。もし動作仕様をすべてテストで記述できているのなら、
外部パッケージが将来バージョンアップされたとしても何の心配もいりません。
テストをクリアしたということは、システムは期待通りに動作するということだからです。

.. _testing-practices.cross-team-tests:

複数チームでのテスト
##########

あるパッケージについての機能を文書化するためにテストを書いているとき、
そのテストの所有者はあなたです。今あなたがテストを作成しているパッケージの作者は、
そのテストのことについては何も知りません。パッケージの作者とよりつながりを深めるため、
作成したテストを使用してコミュニケートしたり、
そのテストを使用して共同作業をしたりすることができるでしょう。

あなたが作成したテストを使用してパッケージの作者と共同作業をすることになれば、
テストも共同で書くことになります。そうすることで、
より多くのテストケースを挙げられるようになるでしょう。
「暗黙の了解」などに頼っていては、共同作業はできません。
テストと同時に、あなたはそのパッケージに対して期待していることを正確に文書化することになります。
また、すべてのテストにクリアした時点で、
作者はパッケージが完成したことを知ることになります。

スタブ (本書の前のほうで説明した "モックオブジェクト" の章を参照ください)
を使用することで、パッケージの作者と別れても作業できるようになります。
パッケージ作者の仕事は、パッケージの実際の実装でテストをクリアするようにすること。
そしてあなたの仕事はあなたが書いたコードでテストをクリアするようにすることです。
この段階になれば、あなたはスタブオブジェクトを使用すればよいのです。
このやり方により、2 つのチームが独立して開発できるようになります。


